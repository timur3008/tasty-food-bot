from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InputMediaPhoto

from keyboards.inline import (
    get_one_category_kb,
    get_two_category_kb,
    get_three_category_kb,
    get_four_category_kb,
    get_five_category_kb,
    get_six_category_kb,
    get_seven_category_kb,
    get_eight_category_kb,
    get_nine_category_kb,
    get_ten_category_kb,
    get_eleven_category_kb,
    get_twelve_category_kb,
    get_thirteen_category_kb,
    get_fourteen_category_kb,
    get_fifteen_category_kb,
    get_purchases_kb
)

router = Router()

# ============== –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callbacks –æ—Ç food_callbacks ============= #
# ==================== –ó–∞–≤—Ç—Ä–∞–∫–∏ ==================== #
@router.callback_query(F.data.contains('one_prev_food'))
async def get_prev_food_one(call: CallbackQuery) -> None:
    print(call.data)
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_one_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–ó–ê–í–¢–†–ê–ö–ò</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('one_next_food'))
async def get_next_food_one(call: CallbackQuery) -> None:
    print(call.data)
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_one_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–ó–ê–í–¢–†–ê–ö–ò</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞ ==================== #
@router.callback_query(F.data.contains('two_prev_food'))
async def get_prev_food_two(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_two_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–ì–û–†–Ø–ß–ò–ï –ë–õ–Æ–î–ê</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('two_next_food'))
async def get_next_food_two(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_two_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–ì–û–†–Ø–ß–ò–ï –ë–õ–Æ–î–ê</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –°—É–ø—ã ==================== #
@router.callback_query(F.data.contains('three_prev_food'))
async def get_prev_food_three(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_three_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–°–£–ü–´</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('three_next_food'))
async def get_next_food_three(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_three_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–°–£–ü–´</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –°–∞–ª–∞—Ç—ã ==================== #
@router.callback_query(F.data.contains('four_prev_food'))
async def get_prev_food_four(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_four_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–°–ê–õ–ê–¢–´</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('four_next_food'))
async def get_next_food_four(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_four_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–°–ê–õ–ê–¢–´</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ ==================== #
@router.callback_query(F.data.contains('five_prev_food'))
async def get_prev_food_five(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_five_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–ò–¢–ê–ù–ò–ï</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('five_next_food'))
async def get_next_food_five(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_five_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–ò–¢–ê–ù–ò–ï</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –°—ç–Ω–¥–≤–∏—á–∏ ==================== #
@router.callback_query(F.data.contains('six_prev_food'))
async def get_prev_food_six(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_six_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–°–≠–ù–î–í–ò–ß–ò</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('six_next_food'))
async def get_next_food_six(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_six_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–°–≠–ù–î–í–ò–ß–ò</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(
        media=media,
        reply_markup=get_one_kb
    )
# ================================================== #

# ==================== –ü–∞—Å—Ç–∞ ==================== #
@router.callback_query(F.data.contains('seven_prev_food'))
async def get_prev_food_seven(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_seven_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–ü–ê–°–¢–ê</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('seven_next_food'))
async def get_next_food_seven(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_seven_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–ü–ê–°–¢–ê</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –ì–∞—Ä–Ω–∏—Ä—ã ==================== #
@router.callback_query(F.data.contains('eight_prev_food'))
async def get_prev_food_eight(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_eight_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–ì–ê–†–ù–ò–†–´</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(
        media=media,
        reply_markup=get_one_kb
    )

@router.callback_query(F.data.contains('eight_next_food'))
async def get_next_food_eight(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_eight_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–ì–ê–†–ù–ò–†–´</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –ë–ª–∏–Ω—ã ==================== #
@router.callback_query(F.data.contains('nine_prev_food'))
async def get_prev_food_nine(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_nine_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–ë–õ–ò–ù–´</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('nine_next_food'))
async def get_next_food_nine(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_nine_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–ë–õ–ò–ù–´</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –í–∞—Ñ–ª–∏ ==================== #
@router.callback_query(F.data.contains('ten_prev_food'))
async def get_prev_food_ten(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_ten_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–í–ê–§–õ–ò</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('ten_next_food'))
async def get_next_food_ten(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_ten_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–í–ê–§–õ–ò</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –•–ª–µ–± ==================== #
@router.callback_query(F.data.contains('eleven_prev_food'))
async def get_prev_food_eleven(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_eleven_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–•–õ–ï–ë</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('eleven_next_food'))
async def get_next_food_eleven(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_eleven_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–•–õ–ï–ë</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –ö–æ—Ñ–µ ==================== #
@router.callback_query(F.data.contains('twelve_prev_food'))
async def get_prev_food_twelve(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_twelve_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–ö–û–§–ï</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('twelve_next_food'))
async def get_next_food_twelve(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_twelve_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–ö–û–§–ï</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –ß–∞–π ==================== #
@router.callback_query(F.data.contains('thirteen_prev_food'))
async def get_prev_food_thirteen(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_thirteen_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–ß–ê–ô</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('thirteen_next_food'))
async def get_next_food_thirteen(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_thirteen_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–ß–ê–ô</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –§—Ä–µ—à–∏ ==================== #
@router.callback_query(F.data.contains('fourteen_prev_food'))
async def get_prev_food_fourteen(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_fourteen_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–§–†–ï–®–ò</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('fourteen_next_food'))
async def get_next_food_fourteen(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_fourteen_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–§–†–ï–®–ò</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #

# ==================== –ù–∞–ø–∏—Ç–∫–∏ ==================== #
@router.callback_query(F.data.contains('fifteen_prev_food'))
async def get_prev_food_fifteen(call: CallbackQuery) -> None:
    _, index, page = call.data.split(':')

    if int(page) == 1:
        return await call.answer(text='–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_fifteen_category_kb(index=int(index) - 1, current_page=int(page) - 1)
    image = data['image']

    text = f'<b>–ù–ê–ü–ò–¢–ö–ò</b>\n\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)

@router.callback_query(F.data.contains('fifteen_next_food'))
async def get_next_food_fifteen(call: CallbackQuery) -> None:
    _, index, page, total_pages = call.data.split(':')

    if int(page) == int(total_pages):
        return await call.answer(text='–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', show_alert=True)

    data, get_one_kb = get_fifteen_category_kb(index=int(index) + 1, current_page=int(page) + 1)

    image = data['image']

    text = f'<b>–ù–ê–ü–ò–¢–ö–ò</b>\n\n<b>üç≤–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n<b>üßæ–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n<b>üí∏–¶–µ–Ω–∞:</b> {data['price']} —Å—É–º'
    media = InputMediaPhoto(media=image, caption=text, parse_mode='HTML')
    await call.message.edit_media(media=media, reply_markup=get_one_kb)
# ================================================== #